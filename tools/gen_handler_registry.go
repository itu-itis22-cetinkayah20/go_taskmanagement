package main

import (
	"encoding/json"
	"os"
	"path/filepath"
	"text/template"
)

const outFile = "../handlers/registry_gen.go"
const tpl = `// Code generated by gen_handler_registry.go; DO NOT EDIT.
package handlers

import "github.com/gofiber/fiber/v2"

func init() {
	OperationRegistry = map[string]fiber.Handler{
{{- range . }}
		"{{.}}": {{.}},
{{- end }}
	}
}`

func main() {
	// Load swagger.json
	f, err := os.Open("../docs/swagger.json")
	if err != nil {
		panic(err)
	}
	defer f.Close()
	var spec struct {
		Paths map[string]map[string]struct {
			OperationID string `json:"operationId"`
		} `json:"paths"`
	}
	if err := json.NewDecoder(f).Decode(&spec); err != nil {
		panic(err)
	}
	// Collect unique operationIds
	set := map[string]struct{}{}
	for _, ops := range spec.Paths {
		for _, op := range ops {
			if op.OperationID != "" {
				set[op.OperationID] = struct{}{}
			}
		}
	}
	list := make([]string, 0, len(set))
	for id := range set {
		list = append(list, id)
	}
	// Generate registry_gen.go
	tmpl := template.Must(template.New("registry").Parse(tpl))
	os.MkdirAll(filepath.Dir(outFile), 0755)
	out, err := os.Create(outFile)
	if err != nil {
		panic(err)
	}
	defer out.Close()
	if err := tmpl.Execute(out, list); err != nil {
		panic(err)
	}
}
