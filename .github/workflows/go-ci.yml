name: Go CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Install dependencies
        run: go mod download
        timeout-minutes: 5

      - name: Verify OpenAPI spec exists
        run: |
          if [ ! -f "test/testdata/openapi.yaml" ]; then
            echo "OpenAPI spec not found at test/testdata/openapi.yaml"
            exit 1
          fi
          echo "OpenAPI spec found at test/testdata/openapi.yaml"
        timeout-minutes: 1

      - name: Run unit tests
        run: go test ./... -v -timeout=30s
        timeout-minutes: 5

      - name: Run contract tests
        run: go test ./test/contract -v -timeout=30s
        env:
          SPEC_PATH: test/testdata/openapi.yaml
        timeout-minutes: 5

      - name: Run contract tests with auth flow
        run: go test ./test/contract -run Test_OpenAPI_Contract_AuthFlow -v -timeout=30s
        env:
          SPEC_PATH: test/testdata/openapi.yaml
        timeout-minutes: 3

      - name: Run dynamic OpenAPI contract tests
        run: go test ./test/contract -run Test_OpenAPI_Contract -v -timeout=30s
        env:
          SPEC_PATH: test/testdata/openapi.yaml
        timeout-minutes: 5

      - name: Validate OpenAPI specification
        run: go test ./test/contract -run TestOpenAPISpecLoading -v -timeout=30s
        env:
          SPEC_PATH: test/testdata/openapi.yaml
        timeout-minutes: 2

      - name: Test basic endpoints
        run: go test ./test/contract -run TestBasicEndpoints -v -timeout=30s
        timeout-minutes: 3

      - name: Generate test report
        if: always()
        run: |
          echo "=== Test Summary ==="
          echo "✅ Unit Tests: Completed"
          echo "✅ Contract Tests: Completed" 
          echo "✅ Auth Flow Tests: Completed"
          echo "✅ OpenAPI Dynamic Tests: Completed"
          echo "✅ Spec Validation: Completed"
          echo "✅ Basic Endpoint Tests: Completed"
        timeout-minutes: 1